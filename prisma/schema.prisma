generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Teacher {
  id          Int          @id @default(autoincrement())
  firstName   String       @db.VarChar(255)
  lastName    String       @db.VarChar(255)
  email       String       @db.VarChar(255)
  password    String       @db.VarChar(255)
  assignments Assignment[] @relation("assignmentsToteachers")
  groups      Group[]      @relation("groupsToteachers")
}

model Group {
  id              Int       @id @default(autoincrement())
  name            String    @db.VarChar(255)
  dateAdjustment  Int       @db.SmallInt
  teacher         Teacher   @relation("groupsToteachers", fields: [teacherId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  teacherId       Int       @default(1)
  students        Student[] @relation("studentsTogroups")
}

model Student {
  id          Int          @id @default(autoincrement())
  firstName   String       @db.VarChar(255)
  lastName    String       @db.VarChar(255)
  email       String       @db.VarChar(255)
  password    String       @db.VarChar(255)
  submissions Submission[]
  Group       Group        @relation("studentsTogroups", fields: [groupId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  groupId     Int          @default(1)
}

model Subject {
  id          Int          @id @default(autoincrement())
  name        String       @db.VarChar(255)
  assignments Assignment[] @relation("assignmentsTosubjects")
}

model Assignment {
  id             Int          @id @default(autoincrement())
  title          String       @db.VarChar(255)
  description    String       @db.Text
  url            String       @db.VarChar(255)
  defaultDueDate DateTime?    @db.Date
  teacher        Teacher      @relation("assignmentsToteachers", fields: [teacherId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  teacherId      Int
  subject        Subject      @relation("assignmentsTosubjects", fields: [subjectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  subjectId      Int
  submissions    Submission[]
}

model Submission {
  id            Int        @id @default(autoincrement())
  dueDate       DateTime   @db.Date
  dateStarted   DateTime?  @db.Date
  dateCompleted DateTime?  @db.Date
  student       Student    @relation(fields: [studentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  studentId     Int
  assignment    Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  assignmentId  Int

  @@unique(fields: [studentId, assignmentId], name: "submissionId")
}
